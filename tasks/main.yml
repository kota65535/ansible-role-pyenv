---
- name: Install packages
  include: packages.yml

- name: Check if the users exist
  shell: "getent passwd {{ item }}"
  with_items: "{{ pyenv_users }}"

- name: Get each user's home directory
  shell: "getent passwd {{ item }} | awk -F: '{ print $6 }'"
  with_items: "{{ pyenv_users }}"
  register: remote_user_homes
  failed_when: remote_user_homes.stdout == ""
- name: Set pyenv_users_info
  set_fact:
    pyenv_users_info: "{{ pyenv_users_info|default([]) + [ {'name': item.item, 'pyenv_root': item.stdout + '/.pyenv' } ] }}"
  with_items: "{{ remote_user_homes.results }}"
- debug: var=pyenv_users_info

# http://hakunin.com/six-ansible-practices
- name: Ensure github.com is a known host
  lineinfile:
    dest: "~/.ssh/known_hosts"
    create: yes
    state: present
    line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
    regexp: "^github\\.com"

- name: Install pyenv for selected users
  git:
    repo: "{{ pyenv_repo }}"
    dest: "{{ item.pyenv_root }}"
    accept_hostkey: yes
    force: yes
  with_items: "{{ pyenv_users_info }}"
  become: yes
  become_user: "{{ item.name }}"

- name: Install pyenv-virtualenv plugin
  git:
    repo: "{{ pyenv_virtualenv_repo }}"
    dest: "{{ item.pyenv_root }}/plugins/pyenv-virtualenv"
    accept_hostkey: yes
    force: yes
  with_items: "{{ pyenv_users_info }}"
  become: yes
  become_user: "{{ item.name }}"

- name: Add pyenv initialization to profile system-wide
  template:
    src: pyenv.sh.j2
    dest: "{{ pyenv_profile_path }}"
    owner: root
    group: root
    mode: 0755
  become: yes

- name: Replace 'x' of the version with the latest
  script: get_latest_version.sh {{ pyenv_profile_path }} {{ item }}
  with_items: "{{ pyenv_python_versions }}"
  register: latest_versions
# - debug: var=latest_versions
- name: Set pyenv_python_versions_mod
  set_fact:
    pyenv_python_versions_mod: "{{ pyenv_python_versions_mod|default([]) + [ item.stdout_lines[0] ] }}"
  with_items: "{{ latest_versions.results }}"
# - debug: var=pyenv_python_versions_mod

- name: Install Python interpreters {{ pyenv_python_versions_mod }} for select users
  shell: ${SHELL} -lc "pyenv install {{ item[1] }}"
  args:
    creates: "{{ item[0].pyenv_root }}/versions/{{ item[1] }}/bin/python"
  with_nested:
    - "{{ pyenv_users_info }}"
    - "{{ pyenv_python_versions_mod }}"
  become: yes
  become_user: "{{ item[0].name }}"
  when: pyenv_python_versions is defined

- name: Replace 'x' of the version with the latest
  script: get_latest_version.sh {{ pyenv_profile_path }} {{ item.py_version }}
  with_items: "{{ pyenv_virtualenvs }}"
  register: latest_versions
- debug: var=latest_versions
- name: Set pyenv_python_versions_mod_4venv
  set_fact:
    pyenv_python_versions_mod_4venv: "{{ pyenv_python_versions_mod_4venv|default([]) + [ item.stdout_lines[0] ] }}"
  with_items: "{{ latest_versions.results }}"
- debug: var=pyenv_python_versions_mod_4venv

- name: Set pyenv_virtualenvs_info
  set_fact:
    pyenv_virtualenvs_info: "{{ pyenv_virtualenvs_info|default([]) + [ { 'py_version': item[0], 'venv_name': item[1].venv_name } ] }}"
  with_together:
    - "{{ pyenv_python_versions_mod_4venv }}"
    - "{{ pyenv_virtualenvs }}"
- debug: var=pyenv_virtualenvs_info

- name: Create virtual environments
  shell: ${SHELL} -lc "printenv && pyenv virtualenv {{ item[1].py_version }} {{ item[1].venv_name }}"
         creates="{{ item[0].pyenv_root }}/versions/{{ item[1].venv_name }}/bin/python"
  with_nested:
    - "{{ pyenv_users_info }}"
    - "{{ pyenv_virtualenvs_info }}"
  become: yes
  become_user: "{{ item[0].name }}"
  when: pyenv_virtualenvs is defined

