---
- name: Check if the users exist
  shell: "id {{ item }}"
  with_items: "{{ pyenv_users }}"
  become: yes
  changed_when: no

# http://hakunin.com/six-ansible-practices
- name: Ensure github.com is a known host
  lineinfile:
    dest: "~/.ssh/known_hosts"
    create: yes
    state: present
    line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
    regexp: "^github\\.com"

- name: Install pyenv for selected users
  git:
    repo: "{{ pyenv_repo }}"
    dest: "{{ pyenv_root }}"
    accept_hostkey: yes
    force: yes
  with_items: "{{ pyenv_users }}"
  become: yes
  become_user: "{{ item }}"

- name: Install pyenv-virtualenv plugin for selected users
  git:
    repo: "{{ pyenv_virtualenv_repo }}"
    dest: "{{ pyenv_root }}/plugins/pyenv-virtualenv"
    accept_hostkey: yes
    force: yes
  with_items: "{{ pyenv_users }}"
  become: yes
  become_user: "{{ item }}"

- name: Add pyenv initialization lines to {{ pyenv_profile_path }}
  blockinfile:
    src: pyenv.sh.j2
    dest: "{{ pyenv_profile_path }}"
    owner: "{{ item }}"
    # group: root
    mode: 0644
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK by kota65535.pyenv"
  become: yes
  become_user: "{{ item }}"
  with_items: "{{ pyenv_users }}"
  when: pyenv_profile_owner is not defined

- name: Add pyenv initialization lines to {{ pyenv_profile_path }}
  blockinfile:
    src: pyenv.sh.j2
    dest: "{{ pyenv_profile_path }}"
    owner: "{{ pyenv_profile_owner }}"
    # group: root
    mode: 0644
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK by kota65535.pyenv"
  become: yes
  become_user: "{{ pyenv_profile_owner }}"
  with_items: "{{ pyenv_users }}"
  when: pyenv_profile_owner is defined


# Executed in localhost
- name: Get the latest version for 'X' in version string
  script: get_latest_version.sh {{ pyenv_repo }} {{ item }}
  with_items: "{{ pyenv_python_versions }}"
  register: latest_versions
  delegate_to: 127.0.0.1
  changed_when: no
# - debug: var=latest_versions
# - debug: var=pyenv_python_versions
# Make dict 'pyenv_python_versions_dict' to associate 'X' version with the actual latest version
- set_fact:
    pyenv_python_versions_dict: "{{ pyenv_python_versions_dict|default({}) | combine( { item[0]: item[1].stdout } ) }}"
  with_together:
    - "{{ pyenv_python_versions }}"
    - "{{ latest_versions.results }}"
# - debug: var=pyenv_python_versions_dict

- name: Install Python interpreters {{ pyenv_python_versions_dict.values() }} for select users
  shell: ${SHELL} -lc "pyenv install {{ pyenv_python_versions_dict[item[1]] }}"
  args:
    creates: "{{ pyenv_root }}/versions/{{ pyenv_python_versions_dict[item[1]] }}/bin/python"
  with_nested:
    - "{{ pyenv_users }}"
    - "{{ pyenv_python_versions_dict.keys() }}"
  become: yes
  become_user: "{{ item[0] }}"
  when: pyenv_python_versions is defined

# Set pyenv_virtualenvs_mod to replace version strings
- set_fact:
    pyenv_virtualenvs_mod: "{{ pyenv_virtualenvs_mod|default([]) +  [ { 'py_version': pyenv_python_versions_dict[item.py_version], 'venv_name': item.venv_name } ] }}"
  with_items:
    - "{{ pyenv_virtualenvs }}"
- debug: var=pyenv_virtualenvs_mod

- name: Create virtual environments
  shell: ${SHELL} -lc "pyenv virtualenv {{ item[1].py_version }} {{ item[1].venv_name }}"
         creates="{{ pyenv_root }}/versions/{{ item[1].venv_name }}/bin/python"
  with_nested:
    - "{{ pyenv_users }}"
    - "{{ pyenv_virtualenvs_mod|default([]) }}"
  become: yes
  become_user: "{{ item[0] }}"

